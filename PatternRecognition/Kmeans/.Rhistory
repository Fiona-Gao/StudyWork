setwd("/Users/fiona/RWorkspace/Kmeans")
irisData <- read.csv("iris.csv")
colnames(irisData) <- c("sepal_length","sepal_width", "petal_length", "petal_width", "class")
trainData <- irisData[, 1:4]
irisKmeans <- KmeansFun(3, trainData,100)
Disted <- function(xi, xj){
dist <- 0
for(w in 1:length(xi)){
dist <- dist + (xi[w] - xj[w])^2
}
return(sqrt(dist))
}
KmeansFun <- function(k, Data, ktime){
Class <- -1
# random get the Mean Vector
oriMeanVec <- Data[sample(nrow(Data),k),]
# initialize MeanVec
MeanVec <- as.data.frame(matrix(0,ncol=length(oriMeanVec),nrow = nrow(oriMeanVec)))
Data <- cbind(Data, Class)
# if the MeanVector change
# xi <- Data[,1:(length(Data)-1)]
count <- 0
judg <- !identical(MeanVec,oriMeanVec)
while(judg & count < ktime){
#    browser()
count <- count + 1
for (i in 1:nrow(Data)) {
#      browser()
distVec <- c()
for(j in 1:k){
#        browser()
distVec[j] <- Disted(Data[i, 1:(length(Data)-1)], oriMeanVec[j,])
}
Data[i, "Class"]  <- which.min(distVec)
}
for(i in 1:k){
classData <- Data[Data$Class == i, 1:(length(Data)-1)]
if(nrow(classData) == 0){
MeanVec[i,] <- oriMeanVec[i,]
}
MeanVec.one <- apply(classData, 2, mean)
MeanVec[i,] <- MeanVec.one
}
judg <- !identical(MeanVec,oriMeanVec)
oriMeanVec <- MeanVec
}
return(list(Data,oriMeanVec))
}
setwd("/Users/fiona/RWorkspace/Kmeans")
irisData <- read.csv("iris.csv")
colnames(irisData) <- c("sepal_length","sepal_width", "petal_length", "petal_width", "class")
trainData <- irisData[, 1:4]
irisKmeans <- KmeansFun(3, trainData,100)
irisKmeans
setwd("/Users/fiona/RWorkspace/Kmeans")
irisData <- read.csv("iris.csv")
colnames(irisData) <- c("sepal_length","sepal_width", "petal_length", "petal_width", "class")
trainData <- irisData[, 1:4]
irisKmeans <- KmeansFun(3, trainData,10000)
irisKmeans
nrow(irisKmeans[[1]])
nrow(irisKmeans[[1]]$Class == 1)
nrow(irisKmeans[[1]]$Class == 2)
nrow(irisKmeans[[1]]$Class == 3)
nrow(irisKmeans[1]$Class == 3)
nrow(irisLmeans[irisKmeans[[1]]$Class == 3,])
nrow(irisKmeans[irisKmeans[[1]]$Class == 3,])
nrow(irisKmeans[[1]][irisKmeans[[1]]$Class == 3,])
nrow(irisKmeans[[1]][irisKmeans[[1]]$Class == 2,])
nrow(irisKmeans[[1]][irisKmeans[[1]]$Class == 1,])
irisKmeans <- KmeansFun(3, trainData,5000)
nrow(irisKmeans[[1]][irisKmeans[[1]]$Class == 1,])
nrow(irisKmeans[[1]][irisKmeans[[1]]$Class == 2,])
nrow(irisKmeans[[1]][irisKmeans[[1]]$Class == 3,])
balanceData <- read.csv("balance-scale.data")
balanceData
btrainData <- balanceData[,2:5]
balanceKmeans <- KmeansFun(3, btrainData,1000)
nrow(balanceData[balanceData$B == "B",])
nrow(balanceData[balanceData$B == "L",])
nrow(balanceData[balanceData$B == "R",])
balanceKmeans
nrow(balanceKmeans[[1]][balanceKmeans[[1]]$Class == 1,])
nrow(balanceKmeans[[1]][balanceKmeans[[1]]$Class == 2,])
nrow(balanceKmeans[[1]][balanceKmeans[[1]]$Class == 3,])
balanceKmeans <- KmeansFun(3, btrainData,10000)
nrow(balanceKmeans[[1]][balanceKmeans[[1]]$Class == 3,])
nrow(balanceKmeans[[1]][balanceKmeans[[1]]$Class == 2,])
nrow(balanceKmeans[[1]][balanceKmeans[[1]]$Class == 1,])
plot()
KmeansData <- balanceKmeans[[1]]
KmeansData <- balanceKmeans
k <- nrow(KmeansData[[2]])
k
x <- balanceKmeans[[1]][balanceKmeans[[1]]$Class == 1,1]
y <- balanceKmeans[[1]][balanceKmeans[[1]]$Class == 1,2]
plot(x,y,pch = 1, col = "red", axes =TRUE)
points(x2,y2)
x2 <- balanceKmeans[[1]][balanceKmeans[[1]]$Class == 2,1]
y2
x2 <- balanceKmeans[[1]][balanceKmeans[[1]]$Class == 2,1]
y2 <- balanceKmeans[[1]][balanceKmeans[[1]]$Class == 2,2]
points(x2,y2)
x <- irisKmeans[[1]][irisKmeans[[1]]$Class == 1,1]
y <- irisKmeans[[1]][irisKmeans[[1]]$Class == 1,2]
x2 <- irisKmeans[[1]][irisKmeans[[1]]$Class == 2,1]
y2 <- irisKmeans[[1]][irisKmeans[[1]]$Class == 2,2]
x3 <- irisKmeans[[1]][irisKmeans[[1]]$Class == 3,1]
y3 <- irisKmeans[[1]][irisKmeans[[1]]$Class == 3,2]
plot(x,y,pch = 1, col = "red", axes =TRUE)
points(x2,y2)
points(x3,y3,col = "green")
plot(x,y,pch = 1, col = "red", axes =TRUE,xlab="sepal length", ylab="sepal width", xlim=c(4,7), ylim=c(1,5))
points(x2,y2)
points(x3,y3,col = "green")
plot(x,y,pch = 1, col = "red", axes =TRUE,xlab="sepal length", ylab="sepal width", xlim=c(4,10), ylim=c(1,5))
points(x2,y2)
points(x3,y3,col = "green")
plot(x,y,pch = 1, col = "red", axes =TRUE,xlab="sepal length", ylab="sepal width", xlim=c(3,9), ylim=c(1,5))
points(x2,y2)
points(x3,y3,col = "green")
plot(x2,y2,pch = 1, col = "red", axes =TRUE,xlab="sepal length", ylab="sepal width", xlim=c(3,9), ylim=c(1,5))
plot(y,x,pch = 1, col = "red", axes =TRUE,xlab="sepal length", ylab="sepal width", xlim=c(3,9), ylim=c(1,5))
irisKmeans
x <- irisKmeans[[1]][irisKmeans[[1]]$Class == 1,2]
y <- irisKmeans[[1]][irisKmeans[[1]]$Class == 1,3]
x2 <- irisKmeans[[1]][irisKmeans[[1]]$Class == 2,2]
y2 <- irisKmeans[[1]][irisKmeans[[1]]$Class == 2,3]
x3 <- irisKmeans[[1]][irisKmeans[[1]]$Class == 3,2]
y3 <- irisKmeans[[1]][irisKmeans[[1]]$Class == 3,3]
plot(x,y,pch = 1, col = "red", axes =TRUE,xlab="sepal length", ylab="sepal width", xlim=c(3,9), ylim=c(1,5))
points(x2,y2)
points(x3,y3,col = "green")
plot(x,y,pch = 1, col = "red", axes =TRUE,xlab="sepal length", ylab="sepal width")
points(x2,y2)
points(x3,y3,col = "green")
plot(x,y,pch = 1, col = "red", axes =TRUE,xlab="sepal length", ylab="sepal width")
points(x2,y2)
points(x3,y3,col = "green")
plot(x,y,pch = 1, col = "red", axes =TRUE,xlab="sepal length", ylab="sepal width", xlim=c(1,10), ylim=c(1,10)
points(x2,y2)
points(x3,y3,col = "green")
x <- irisKmeans[[1]][irisKmeans[[1]]$Class == 1,1]
y <- irisKmeans[[1]][irisKmeans[[1]]$Class == 1,2]
x2 <- irisKmeans[[1]][irisKmeans[[1]]$Class == 2,1]
y2 <- irisKmeans[[1]][irisKmeans[[1]]$Class == 2,2]
x3 <- irisKmeans[[1]][irisKmeans[[1]]$Class == 3,1]
y3 <- irisKmeans[[1]][irisKmeans[[1]]$Class == 3,2]
plot(x,y,pch = 1, col = "red", axes =TRUE,xlab="sepal length", ylab="sepal width", xlim=c(3,9), ylim=c(1,5))
points(x2,y2)
points(x3,y3,col = "green")
x <- irisKmeans[[1]][irisKmeans[[1]]$Class == 1,1]
y <- irisKmeans[[1]][irisKmeans[[1]]$Class == 1,2]
x2 <- irisKmeans[[1]][irisKmeans[[1]]$Class == 2,1]
y2 <- irisKmeans[[1]][irisKmeans[[1]]$Class == 2,2]
x3 <- irisKmeans[[1]][irisKmeans[[1]]$Class == 3,1]
y3 <- irisKmeans[[1]][irisKmeans[[1]]$Class == 3,2]
plot(x,y,pch = 1, col = "red", axes =TRUE,xlab="sepal length", ylab="sepal width", xlim=c(3,9), ylim=c(1,5))
points(x2,y2)
points(x3,y3,col = "green")
irisKmean
irisKmeans
mx1 <- irisKmeans[[2]][1,1]
mx1
mx1 <- irisKmeans[[2]][1,2]
my1 <- irisKmeans[[2]][1,2]
plot(x,y,pch = 10, col = "red", axes =TRUE,xlab="sepal length", ylab="sepal width", xlim=c(3,9), ylim=c(1,5))
plot(x,y,pch = 2, col = "red", axes =TRUE,xlab="sepal length", ylab="sepal width", xlim=c(3,9), ylim=c(1,5))
plot(x,y,pch = 3, col = "red", axes =TRUE,xlab="sepal length", ylab="sepal width", xlim=c(3,9), ylim=c(1,5))
plot(x,y,pch = 4, col = "red", axes =TRUE,xlab="sepal length", ylab="sepal width", xlim=c(3,9), ylim=c(1,5))
result <- irisKmeans
result
r1 <- 1;r2 <- 2
mx <- result[[2]][,as.numeric(r1)]
mx
my <- result[[2]][,as.numeric(r2)]
plot(mx,my,pch = 4, col = "red", axes =TRUE,xlab="sepal length", ylab="sepal width")
points(x2,y2)
points(x3,y3,col = "green")
plot(mx,my,pch = 4, col = "black", axes =TRUE,xlab="sepal length", ylab="sepal width", xlim=c(3,9), ylim=c(1,5))
points(x2,y2)
points(x3,y3,col = "green")
myColor <- rainbow(k, alpha=0.02)
myColor
names(result[[1]])
MinX <- min(x) - 1
MaxX <- max(x) + 1
MinY <- min(y) - 1
MaxY <- max(y) + 1
plot(mx,my,pch = 4, col = "black", axes =TRUE,xlab=titleNames[as.numeric(r1)], ylab=titleNames[as.numeric(r2)], xlim=c(MinX,MaxX), ylim=c(MinY,MaxY))
titleNames <- names(result[[1]])
plot(mx,my,pch = 4, col = "black", axes =TRUE,xlab=titleNames[as.numeric(r1)], ylab=titleNames[as.numeric(r2)], xlim=c(MinX,MaxX), ylim=c(MinY,MaxY))
points(x2,y2)
points(x3,y3,col = "green")
points(x,y)
MinX <- min(x) - 1
MinX
MaxX
MaxX
irisKmeans
MinY
MaxY
max(y)
y
min(y)
MinX <- min(x) - 1
MaxX <- max(x) + 1
MinY <- min(y) - 1
MaxY <- max(y) + 1
plot(mx,my,pch = 4, col = "black", axes =TRUE,xlab=titleNames[as.numeric(r1)], ylab=titleNames[as.numeric(r2)], xlim=c(MinX,MaxX), ylim=c(MinY,MaxY))
x <- irisKmeans[[1]][irisKmeans[[1]]$Class == 1,1]
y <- irisKmeans[[1]][irisKmeans[[1]]$Class == 1,2]
x2 <- irisKmeans[[1]][irisKmeans[[1]]$Class == 2,1]
y2 <- irisKmeans[[1]][irisKmeans[[1]]$Class == 2,2]
x3 <- irisKmeans[[1]][irisKmeans[[1]]$Class == 3,1]
y3 <- irisKmeans[[1]][irisKmeans[[1]]$Class == 3,2]
x <- result[[1]][,as.numeric(r1)]
y <- result[[1]][,as.numeric(r2)]
points(x,y)
y
MaxY
max(y)
x <- result[[1]][,as.numeric(r1)]
y <- result[[1]][,as.numeric(r2)]
max(y)
MinX <- min(x) - 1
MaxX <- max(x) + 1
MinY <- min(y) - 1
MaxY <- max(y) + 1
x <- result[[1]][,as.numeric(r1)]
y <- result[[1]][,as.numeric(r2)]
MinX <- min(x) - 1
MaxX <- max(x) + 1
MinY <- min(y) - 1
MaxY <- max(y) + 1
plot(mx,my,pch = 4, col = "black", axes =TRUE,xlab=titleNames[as.numeric(r1)], ylab=titleNames[as.numeric(r2)], xlim=c(MinX,MaxX), ylim=c(MinY,MaxY))
points(x,y)
xi <- x[result[[1]]$Class == i,]
xi <- x[result[[1]]$Class == 1,]
result[[1]]$Class == 1
x
xi <- x[result[[1]]$Class == 1]
plot(mx,my,pch = 4, col = "black", axes =TRUE,xlab=titleNames[as.numeric(r1)], ylab=titleNames[as.numeric(r2)], xlim=c(MinX,MaxX), ylim=c(MinY,MaxY))
myColor <- rainbow(k, alpha=0.02)
for(i in 1:k){
xi <- x[result[[1]]$Class == i]
yi <- y[result[[1]]$Class == i]
points(xi,yi,col = myColor[i])
}
xi <- x[result[[1]]$Class == 1]
yi <- y[result[[1]]$Class == 1]
points(xi,yi,col = myColor[1])
myColor <- rainbow(k, alpha=1)
for(i in 1:k){
xi <- x[result[[1]]$Class == i]
yi <- y[result[[1]]$Class == i]
points(xi,yi,col = myColor[i])
}
myColor <- rainbow(k, alpha=0.5)
for(i in 1:k){
xi <- x[result[[1]]$Class == i]
yi <- y[result[[1]]$Class == i]
points(xi,yi,col = myColor[i])
}
plot(mx,my,pch = 4, col = "black", axes =TRUE,xlab=titleNames[as.numeric(r1)], ylab=titleNames[as.numeric(r2)], xlim=c(MinX,MaxX), ylim=c(MinY,MaxY))
myColor <- rainbow(k, alpha=0.5)
for(i in 1:k){
xi <- x[result[[1]]$Class == i]
yi <- y[result[[1]]$Class == i]
points(xi,yi,col = myColor[i])
}
irisKmeans <- KmeansFun(3, trainData,50000)
result <- irisKmeans
titleNames <- names(result[[1]])
mx <- result[[2]][,as.numeric(r1)]
my <- result[[2]][,as.numeric(r2)]
x <- result[[1]][,as.numeric(r1)]
y <- result[[1]][,as.numeric(r2)]
MinX <- min(x) - 1
MaxX <- max(x) + 1
MinY <- min(y) - 1
MaxY <- max(y) + 1
plot(mx,my,pch = 4, col = "black", axes =TRUE,xlab=titleNames[as.numeric(r1)], ylab=titleNames[as.numeric(r2)], xlim=c(MinX,MaxX), ylim=c(MinY,MaxY))
myColor <- rainbow(k, alpha=0.5)
for(i in 1:k){
xi <- x[result[[1]]$Class == i]
yi <- y[result[[1]]$Class == i]
points(xi,yi,col = myColor[i])
}
result <- balanceKmeans
titleNames <- names(result[[1]])
mx <- result[[2]][,as.numeric(r1)]
my <- result[[2]][,as.numeric(r2)]
x <- result[[1]][,as.numeric(r1)]
y <- result[[1]][,as.numeric(r2)]
MinX <- min(x) - 1
MaxX <- max(x) + 1
MinY <- min(y) - 1
MaxY <- max(y) + 1
plot(mx,my,pch = 4, col = "black", axes =TRUE,xlab=titleNames[as.numeric(r1)], ylab=titleNames[as.numeric(r2)], xlim=c(MinX,MaxX), ylim=c(MinY,MaxY))
myColor <- rainbow(k, alpha=0.5)
for(i in 1:k){
xi <- x[result[[1]]$Class == i]
yi <- y[result[[1]]$Class == i]
points(xi,yi,col = myColor[i])
}
PlotKmeans <- function(result, r1, r2, k){
#result <- balanceKmeans
#r1 <- 1;r2 <- 2
#k <- 3
titleNames <- names(result[[1]])
mx <- result[[2]][,as.numeric(r1)]
my <- result[[2]][,as.numeric(r2)]
x <- result[[1]][,as.numeric(r1)]
y <- result[[1]][,as.numeric(r2)]
MinX <- min(x) - 1
MaxX <- max(x) + 1
MinY <- min(y) - 1
MaxY <- max(y) + 1
plot(mx,my,pch = 4, col = "black", axes =TRUE,xlab=titleNames[as.numeric(r1)], ylab=titleNames[as.numeric(r2)], xlim=c(MinX,MaxX), ylim=c(MinY,MaxY))
myColor <- rainbow(k, alpha=0.5)
for(i in 1:k){
xi <- x[result[[1]]$Class == i]
yi <- y[result[[1]]$Class == i]
points(xi,yi,col = myColor[i])
}
}
PlotKmeans(irisKmeans,1,2,3)
PlotKmeans(irisKmeans,2,3,3)
PlotKmeans(irisKmeans,3,4,3)
abalone <- read.csv("abalone.csv")
abalone
abalone.use <- abalone[,c(2,3,4)]
abalone.use <- abalone[1:500,c(2,3,4)]
abalone.use <- abalone[1:500,c(2,3,4,5)]
abalone.use
names(abalone.use)
names(abalone.use) <- c("Length","Diameter","Height","Whole_weight")
abalone.use
abaloneKmeans <- KmeansFun(3,abalone.use,10000)
PlotKmeans(abaloneKmeans,1,2,3)
PlotKmeans(abaloneKmeans,2,3,3)
PlotKmeans(abaloneKmeans,3,4,3)
PlotKmeans <- function(result, r1, r2, k, alpha){
#result <- balanceKmeans
#r1 <- 1;r2 <- 2
#k <- 3
titleNames <- names(result[[1]])
mx <- result[[2]][,as.numeric(r1)]
my <- result[[2]][,as.numeric(r2)]
x <- result[[1]][,as.numeric(r1)]
y <- result[[1]][,as.numeric(r2)]
MinX <- min(x) - 1
MaxX <- max(x) + 1
MinY <- min(y) - 1
MaxY <- max(y) + 1
plot(mx,my,pch = 4, col = "black", axes =TRUE,xlab=titleNames[as.numeric(r1)], ylab=titleNames[as.numeric(r2)], xlim=c(MinX,MaxX), ylim=c(MinY,MaxY))
myColor <- rainbow(k, alpha=alpha)
for(i in 1:k){
xi <- x[result[[1]]$Class == i]
yi <- y[result[[1]]$Class == i]
points(xi,yi,col = myColor[i])
}
}
PlotKmeans(irisKmeans,3,4,3,0.5)
PlotKmeans(abaloneKmeans,3,4,3,0.05)
PlotKmeans(abaloneKmeans,3,4,3,0.1)
PlotKmeans <- function(result, r1, r2, k, alpha = 1){
#result <- balanceKmeans
#r1 <- 1;r2 <- 2
#k <- 3
titleNames <- names(result[[1]])
mx <- result[[2]][,as.numeric(r1)]
my <- result[[2]][,as.numeric(r2)]
x <- result[[1]][,as.numeric(r1)]
y <- result[[1]][,as.numeric(r2)]
MinX <- min(x) - 1
MaxX <- max(x) + 1
MinY <- min(y) - 1
MaxY <- max(y) + 1
plot(mx,my,pch = 4, col = "black", axes =TRUE,xlab=titleNames[as.numeric(r1)], ylab=titleNames[as.numeric(r2)], xlim=c(MinX,MaxX), ylim=c(MinY,MaxY))
myColor <- rainbow(k, alpha=alpha)
for(i in 1:k){
xi <- x[result[[1]]$Class == i]
yi <- y[result[[1]]$Class == i]
points(xi,yi,col = myColor[i])
}
}
PlotKmeans(abaloneKmeans,3,4,3)
PlotKmeans(abaloneKmeans,3,4,3,0.1)
irisKmeans
PlotKmeans(irisKmeans,1,2,3,0.5)
PlotKmeans(irisKmeans,1,2,3,1)
PlotKmeans(irisKmeans,1,3,3,1)
PlotKmeans(irisKmeans,1,4,3,1)
PlotKmeans(irisKmeans,2,3,3,1)
PlotKmeans(irisKmeans,2,4,3,1)
PlotKmeans(irisKmeans,3,4,3,1)
abaloneKmeans
PlotKmeans(abaloneKmeans,1,2,3,0.1)
PlotKmeans(abaloneKmeans,1,3,3,0.1)
PlotKmeans(abaloneKmeans,1,4,3,0.1)
PlotKmeans(abaloneKmeans,2,3,3,0.1)
PlotKmeans(abaloneKmeans,2,4,3,0.1)
PlotKmeans(abaloneKmeans,3,4,3,0.1)
